version: 2

workflows:
  version: 2
  default:
    jobs:
      - build
      - release
jobs:
  build:
    working_directory: ~/code
    docker:
      - image: mbgl/android-ndk-r19:8e91a7ebab
    environment:
      JVM_OPTS: -Xmx3200m
      BUILDTYPE: Debug
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - run:
          name: Init submodules
          command: git submodule update --init --recursive
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Run nitpick
          command: ./gradlew plugin-annotation:nitpick
      - run:
          name: Check Java code style
          command: make checkstyle
      - run:
          name: Run unit tests
          command: make test
      - run:
          name: Generate Activity Sanity tests
          command: make generate-sanity-test
      - run:
          name: Build testapp APK
          command: |
            ./gradlew accessToken
            ./gradlew app:assembleDebug
      - run:
          name: Build Test APK
          command: |
            ./gradlew app:assembleAndroidTest
      - run:
          name: Build release to test ProGuard rules
          command: ./gradlew app:assembleRelease
      - run:
          name: Log in to Google Cloud Platform
          command: |
            if [ -n "${GCLOUD_SERVICE_ACCOUNT_JSON}" ]; then
              echo "${GCLOUD_SERVICE_ACCOUNT_JSON}" > secret.json
              gcloud auth activate-service-account --key-file secret.json --project mapbox-plugins-android-4e407
              rm secret.json
            fi
      - run:
          name: Run instrumentation tests on Firebase
          no_output_timeout: 1200
          command: |
            if [ -n "${GCLOUD_SERVICE_ACCOUNT_JSON}" ]; then
              gcloud firebase test android models list
              gcloud firebase test android run --type instrumentation \
                --app app/build/outputs/apk/debug/app-debug.apk \
                --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
                --device-ids sailfish --os-version-ids 26 --locales en --orientations portrait --timeout 20m
            fi
      - store_artifacts:
          path: app/build/reports
          destination: reports
      - store_test_results:
          path: app/build/test-results

# ------------------------------------------------------------------------------
  release:
    docker:
      - image: mbgl/android-ndk-r19:8e91a7ebab
    working_directory: ~/code
    environment:
      BUILDTYPE: Release
    steps:
      - checkout
      - run:
          name: Init submodules
          command: git submodule update --init --recursive
      - run:
          name: Generate Bintray credentials
          shell: /bin/bash -euo pipefail
          command: |
            if [ -n "${BINTRAY_USER}" ]; then
              echo "BINTRAY_USER=$BINTRAY_USER
              BINTRAY_API_KEY=$BINTRAY_API_KEY
              GPG_PASSPHRASE=$GPG_PASSPHRASE"
            fi   
      - run:
          name: Add bash environment variable to set which plugin is being released
          command: |
            if [[ $CIRCLE_TAG == v*-annotation ]]; then
              echo 'export PLUGIN_BEING_RELEASED="annotation"' >> $BASH_ENV
              source $PLUGIN_BEING_RELEASED            
            fi  
            if [[ $CIRCLE_TAG == v*-localization ]]; then
              echo 'export PLUGIN_BEING_RELEASED="localization"' >> $BASH_ENV
              source $PLUGIN_BEING_RELEASED              
            fi
            if [[ $CIRCLE_TAG == v*-building ]]; then
              echo 'export PLUGIN_BEING_RELEASED="building"' >> $BASH_ENV
              source $PLUGIN_BEING_RELEASED
            fi
            if [[ $CIRCLE_TAG == v*-markerview ]]; then
              echo 'export PLUGIN_BEING_RELEASED="markerview"' >> $BASH_ENV
              source $PLUGIN_BEING_RELEASED
            fi
            if [[ $CIRCLE_TAG == v*-offline ]]; then
              echo 'export PLUGIN_BEING_RELEASED="offline"' >> $BASH_ENV
              source $PLUGIN_BEING_RELEASED
            fi
            if [[ $CIRCLE_TAG == v*-places ]]; then
              echo 'export PLUGIN_BEING_RELEASED="places"' >> $BASH_ENV
              source $PLUGIN_BEING_RELEASED
            fi
            if [[ $CIRCLE_TAG == v*-scalebar ]]; then
              echo 'export PLUGIN_BEING_RELEASED="scalebar"' >> $BASH_ENV
              source $PLUGIN_BEING_RELEASED
            fi
            if [[ $CIRCLE_TAG == v*-traffic ]]; then
              echo 'export PLUGIN_BEING_RELEASED="traffic"' >> $BASH_ENV
              source $PLUGIN_BEING_RELEASED
            fi
      - run:
          name: Print PLUGIN_BEING_RELEASED variable to confirm that right plugin is being released
          command: |
            echo $PLUGIN_BEING_RELEASED
      - run:
          name: Update the version name for the plugin being released
          command: |
            if [[ $CIRCLE_TAG == v* ]]; then
              sed -i -e "s/^VERSION_NAME=.*/VERSION_NAME=${CIRCLE_TAG:9}/" plugin-$PLUGIN_BEING_RELEASED/gradle.properties
            fi
      - run:
          name: Build Plugins SDK
          command: make build-release
      - deploy:
          name: Publish the correct plugin to Bintray
          command: |
            if [[ $CIRCLE_BRANCH == master ]] || [[ $CIRCLE_TAG == v*- ]]; then
              version=$(cat $PLUGIN_BEING_RELEASED/gradle.properties | grep "VERSION_NAME")
              if [[ $version != *"SNAPSHOT"* ]]; then
                make publish-$PLUGIN_BEING_RELEASED
              fi
              else
                make publish-snapshot-$PLUGIN_BEING_RELEASED
              fi
            fi
      - store_artifacts:
          path: app/build/reports
          destination: reports
